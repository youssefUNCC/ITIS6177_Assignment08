const express = require('express');
const swaggerUi = require('swagger-ui-express');
const swaggerJsdoc = require('swagger-jsdoc');
const cors = require('cors');
const app = express();
const port = 3000;


const options = {
        swaggerDefinition: {
            info: {
                title: 'Assignment 08 API',
                version: '1.0.0',
                description: 'Assignment 08 API autogenerated by swagger doc'
            },
            host: '159.223.188.238:3000',
            basePath: '/',
        },
        apis: ['./server.js'],
    };
    
const specs = swaggerJsdoc(options);


const mariadb = require('mariadb');
const pool = mariadb.createPool({
        host: 'localhost',
        user: 'root',
        password: 'root',
        database: 'sample',
        port: 3306,
        connectionLimit: 5
});

app.use(express.json());
app.use(express.urlencoded({extended: true}));
app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs));
app.use(cors());


/**
 * @swagger
 *     /foods:
 *        get:
 *         description: This should return all companies
 *         produces:
 *              -application/json
 *         responses:
 *              200:
 *                  description: All foods in database
 */
app.get('/foods', async (req, res) => {

        try{
                const rows = await pool.query("SELECT ITEM_NAME FROM foods");
                res.header('food-names', 'success');
                res.status(200);
                res.json(rows);
        } catch (err) {
                res.status(500);
                res.end(err.message || err.toString());
        }
});




/**
 * @swagger
 * /customer-countries:
 *                 get:
 *                   description: This should return all customer countries
 *                   produces:
 *                          -application/json
 *                   responses:
 *                      200:
 *                              description: All customer countries in database
 */
app.get('/customer-countries', async (req, res) => {

        try{
                const rows = await pool.query("SELECT CUST_COUNTRY FROM customer");
                res.header('customer-countries', 'success');
                res.status(200);
                res.json(rows);
        } catch (err) {
                res.status(500);
                res.end(err.message || err.toString());
        }
});




/**
 * @swagger
 * /customer-cities:
 *              get:
 *               description: This should return all customer cities
 *               produces:
 *                      -application/json
 *               responses:
 *                    200:
 *                           description: All customer cities in database
 */
app.get('/customer-cities', async (req, res) => {

        try{
                const rows = await pool.query("SELECT CUST_CITY FROM customer");
                res.header('customer-cities', 'success');
                res.status(200);
                res.json(rows);
        } catch (err) {
                res.status(500);
                res.end(err.message || err.toString());
        }
});

/**
 * @swagger
 * /companies:
 *        get:
 *         description: This should return all companies
 *         produces:
 *              -application/json
 *         responses:
 *              200:
 *                  description: All companies in database
 */
app.get('/companies', async (req, res) => {

        try{
                const rows = await pool.query("SELECT * FROM company");
                res.header('companies', 'success');
                res.status(200);
                res.json(rows);
        } catch (err) {
                res.status(500);
                res.end(err.message || err.toString());
        }
});

app.post('/post-test', (req, res) => {
        console.log('Get body', req.query.id);
        res.sendStatus(200);
});

/**
 * @swagger
 * /companies:
 *   post:
 *     summary: Creates a new company.
 *     consumes:
 *       - application/json
 *     parameters:
 *       - in: query
 *         name: id
 *         description: The company ID to create.
 *         schema:
 *           type: integer
 *       - in: query
 *         name: name
 *         description: The company name to create.
 *         schema:
 *          type: string
 *       - in: query
 *         name: city
 *         description: The company city to create.
 *         schema:
 *          type: string
 *     responses:
 *       200:
 *         description: OK
*/
app.post('/companies', async (req, res) => {
    const company_id = req.query.id;
    const company_name = req.query.name;
    const company_city = req.query.city;

    console.log(company_id, company_name, company_city);
    if (validateData(company_id, res)){
                try{
                        const rows = await pool.query(`INSERT INTO company SET COMPANY_ID = '${company_id}', COMPANY_NAME = '${company_name}', COMPANY_CITY = '${company_city}'`);
                        res.status(200);
                        res.header('companiesPost', 'success');
                        res.json(rows);
                } catch (err) {
                        res.status(500);
                        res.end(err.message || err.toString());
                }
        }
            
    }); 


/**
 * @swagger
 * /companies:
 *   patch:
 *     summary: Patch Company details
 *     description: This should update the company name and company city based on the selected company id
 *     consumes:
 *       - application/json
 *     parameters:
 *       - in: query
 *         name: id
 *         description: The company ID to patch.
 *         schema:
 *           type: integer
 *       - in: query
 *         name: name
 *         description: The company name to patch.
 *         schema:
 *          type: string
 *       - in: query
 *         name: city
 *         description: The company city to patch.
 *         schema:
 *          type: string
 *     responses:
 *       200:
 *         description: OK
*/
app.patch('/companies', async (req, res) => {
        const company_id = req.query.id;
        const company_name = req.query.name;
        const company_city = req.query.city;

        console.log(company_id, company_name, company_city);
        
        if (validateData(company_id, res)){

                try{
                        if (company_name == undefined){
                                await pool.query(`UPDATE company SET COMPANY_CITY = '${company_city}'
                                WHERE COMPANY_ID = '${company_id}'`);
                        } else if (company_city == undefined){
                                await pool.query(`UPDATE company SET COMPANY_NAME = '${company_name}'
                        WHERE COMPANY_ID = '${company_id}'`);
                        } else {
                                await pool.query(`UPDATE company SET COMPANY_NAME = '${company_name}', COMPANY_CITY = '${company_city}'
                        WHERE COMPANY_ID = '${company_id}'`);
                        }
                        res.status(200);
                        res.header('companiesPatch', 'success');
                        res.send('Patched');
                } catch (err) {
                        res.status(500);
                        res.end(err.message || err.toString());
                }
        }

                
});



/**
 * @swagger
 * /companies:
 *   put:
 *     summary: Put Company details
 *     description: This should update the company name and company city based on the selected company id
 *     consumes:
 *       - application/json
 *     parameters:
 *       - in: query
 *         name: id
 *         description: The company ID to patch.
 *         schema:
 *           type: integer
 *       - in: query
 *         name: name
 *         description: The company name to patch.
 *         schema:
 *          type: string
 *       - in: query
 *         name: city
 *         description: The company city to patch.
 *         schema:
 *          type: string
 *     responses:
 *       200:
 *         description: OK
*/
app.put('/companies', async (req, res) => {
        
        const company_id = req.query.id;
        const company_name = req.query.name;
        const company_city = req.query.city;

        console.log(company_id, company_name, company_city);
        if (validateData(company_id, res)){
                try{
                        await pool.query(`INSERT INTO company
                        (COMPANY_ID, COMPANY_NAME, COMPANY_CITY)
                        VALUES
                        ('${company_id}', '${company_name}', '${company_city}')
                        ON DUPLICATE KEY UPDATE
                        COMPANY_NAME = '${company_name}',
                        COMPANY_CITY = '${company_city}'`);
                        res.status(200);
                        res.header('companiesPut', 'success');
                        res.send('Put complete');
                } catch (err) {
                        res.status(500);
                        res.end(err.message || err.toString());
                }
        }

                

});

/**
 * @swagger
 * /companies:
 *   delete:
 *     summary: Delete Company details
 *     description: This should delete the company entry based on the selected company id
 *     consumes:
 *       - application/json
 *     parameters:
 *       - in: query
 *         name: id
 *         description: The company to delete.
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: OK
*/
app.delete('/companies', async (req, res) => {

        const company_id = req.query.id;
        const company_name = req.query.name;
        const company_city = req.query.city;

        console.log(company_id, company_name, company_city);

        if (validateData(company_id, res)){
                try{
                        await pool.query(`DELETE FROM company WHERE COMPANY_ID = '${company_id}'`);                       
                        res.status(200);
                        res.header('companiesDelete', 'success');
                        res.send('Deleted');
                } catch (err) {
                        res.status(500);
                        res.end(err.message || err.toString());
                }
        }

        
});

function validateData(id, res){
        let bool = true;
        if ((Number.parseInt(id) !== Number(id)) || Number.isNaN(Number(id))){
                res.status(400);
                res.send(`Integer required, could not make company id ${id}. Please use only integer numbers.`);
                res.end();
                bool = false;
        }

        return bool;
}


app.listen(port, () => {
console.log(`Example app listening at http://localhost:${port}`);
});
